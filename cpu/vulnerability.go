package cpu

import (
	"fmt"
	"strings"
)

const (
	notAffectedSysFsValue = "Not Affected"
	vulnerableSysFsValue  = "Vulnerable"
	mitigationSysFsValue  = "Mitigation"
)

const (
	NotAffected VulnerabilityState = "not affected"
	Vulnerable  VulnerabilityState = "vulnerable"
	Mitigation  VulnerabilityState = "mitigation"
)

type VulnerabilityState string

func (s VulnerabilityState) String() string {
	return string(s)
}

type Vulnerability struct {
	CodeName   string
	State      VulnerabilityState
	Mitigation string
}

func ParseVulnerability(name, value string) (Vulnerability, error) {
	v := Vulnerability{CodeName: name}

	if value == notAffectedSysFsValue {
		v.State = NotAffected
		return v, nil
	}

	if strings.HasPrefix(value, vulnerableSysFsValue) {
		v.State = Vulnerable
		v.Mitigation = strings.TrimPrefix(strings.TrimPrefix(value, vulnerableSysFsValue), ": ")
		return v, nil
	}

	if strings.HasPrefix(value, mitigationSysFsValue) {
		v.State = Mitigation
		v.Mitigation = strings.TrimPrefix(strings.TrimPrefix(value, mitigationSysFsValue), ": ")
		return v, nil
	}

	return v, fmt.Errorf("unknown vulnerability state for %s: %s", name, value)
}
